import { useEffect, useState } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  Calendar,  
  Clock, 
  Eye, 
  ArrowLeft, 
  ArrowRight, 
  Share2, 
  Bookmark, 
  Facebook, 
  Twitter, 
  Linkedin,
  ChevronRight,
  Tag,
  GraduationCap
} from 'lucide-react';

// Import the articles from separate files
import { articles as academicArticles } from '../data/articles.tsx';
import { articles as walterArticles } from './Blog.tsx';

const ArticlePage = () => {
  const { slug } = useParams<{ slug: string }>();
  const navigate = useNavigate();
  const [article, setArticle] = useState<any | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [relatedArticles, setRelatedArticles] = useState<any[]>([]);
  const [isScrolled, setIsScrolled] = useState<boolean>(false);
  
  useEffect(() => {
    // Scroll to top when component mounts
    window.scrollTo(0, 0);
    
    // Simulate article loading (could be an API call in a real app)
    setLoading(true);
    
    // Combine both article sources
    const allArticles = [...academicArticles, ...walterArticles];
    
    // Find the article by slug
    console.log("Looking for slug:", slug);
    console.log("Available articles:", allArticles.map(a => a.slug));
    
    const foundArticle = allArticles.find(a => a.slug === slug);
    console.log("Found article:", foundArticle ? foundArticle.id : "null");
    
    if (foundArticle) {
      setArticle(foundArticle);
      
      // Find related articles (same category or from same author)
      const related = allArticles
        .filter(a => a.id !== foundArticle.id) // Exclude current article
        .filter(a => a.category === foundArticle.category || a.author.id === foundArticle.author.id)
        .slice(0, 3); // Limit to 3 related articles
      
      setRelatedArticles(related);
    }
    
    setLoading(false);
    
    // Add scroll listener for header effect
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 100);
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [slug]);
  
  // Format the article date
  const formatDate = (dateString: string) => {
    return dateString; // You could implement proper date formatting here
  };
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-academic-900 to-academic-800 flex items-center justify-center">
        <motion.div
          className="w-16 h-16 rounded-full border-4 border-t-sicredi-500 border-r-sicredi-500 border-b-sicredi-500/30 border-l-sicredi-500/30"
          animate={{ rotate: 360 }}
          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
        />
      </div>
    );
  }
  
  if (!article) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-academic-900 to-academic-800 py-32 px-4">
        <div className="container mx-auto max-w-4xl">
          <div className="bg-white rounded-2xl p-8 text-center shadow-xl">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-academic-50 mb-4">
              <motion.div
                initial={{ opacity: 0.5, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 1, repeat: Infinity, repeatType: "reverse" }}
              >
                <Eye size={24} className="text-academic-600" />
              </motion.div>
            </div>
            <h1 className="text-3xl font-serif font-bold text-gray-900 mb-4">Artigo não encontrado</h1>
            <p className="text-gray-600 mb-8">
              O artigo que você está procurando não existe ou foi removido.
            </p>
            <Link
              to="/blog"
              className="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-academic-600 to-academic-500 text-white rounded-xl font-medium hover:shadow-lg transition-all"
            >
              <ArrowLeft size={18} />
              Voltar para o Blog
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Floating header when scrolled down */}
      <motion.div
        className={`fixed top-0 left-0 right-0 z-30 backdrop-blur-lg bg-white/90 border-b border-gray-200 shadow-sm transition-all duration-300 ${isScrolled ? 'translate-y-0' : '-translate-y-full'}`}
        animate={{ translateY: isScrolled ? 0 : -100 }}
        transition={{ duration: 0.4 }}
      >
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <Link to="/blog" className="flex items-center gap-2 text-gray-800">
            <ArrowLeft size={18} className="text-academic-600" />
            <span className="font-medium">Voltar ao Blog</span>
          </Link>
          
          <div className="flex items-center gap-6">
            <div className="hidden sm:flex items-center space-x-4">
              <button className="text-gray-500 hover:text-academic-600 transition-colors">
                <Share2 size={18} />
              </button>
              <button className="text-gray-500 hover:text-academic-600 transition-colors">
                <Bookmark size={18} />
              </button>
            </div>
            
            <div className="h-8 w-8 rounded-full bg-gradient-to-br from-academic-600 to-academic-700 flex items-center justify-center text-white">
              <span className="text-xs font-bold">WE</span>
            </div>
          </div>
        </div>
      </motion.div>
      
      <div className="pt-16 pb-32">
        <div className="container mx-auto px-4">
          {/* Article Header */}
          <div className="max-w-4xl mx-auto mb-12">
            <motion.div 
              className="mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6 }}
            >
              <Link 
                to="/blog" 
                className="inline-flex items-center gap-2 text-academic-600 hover:text-academic-700 transition-colors"
              >
                <ArrowLeft size={16} />
                <span>Voltar para o Blog</span>
              </Link>
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.1 }}
            >
              <div className="mb-6">
                <span className="inline-block bg-academic-50 py-1 px-3 rounded-full text-xs font-medium text-academic-700">
                  {article.category}
                </span>
              </div>
              
              <h1 className="text-4xl md:text-5xl font-serif font-bold text-gray-900 mb-6 leading-tight">
                {article.title}
              </h1>
              
              <p className="text-xl text-gray-600 mb-8">
                {article.excerpt}
              </p>
              
              <div className="flex flex-wrap items-center gap-6 pb-8 border-b border-gray-200">
                <div className="flex items-center gap-4">
                  <div className="h-12 w-12 rounded-full bg-academic-50 border border-academic-100 flex items-center justify-center overflow-hidden">
                    {article.author.image ? (
                      <img 
                        src={article.author.image}
                        alt={article.author.name}
                        className="h-full w-full object-cover"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.onerror = null;
                          // Fallback to initials
                          target.style.display = 'none';
                          target.parentElement!.innerHTML = `<span className="text-lg font-bold text-academic-600">${article.author.name.charAt(0)}</span>`;
                        }}
                      />
                    ) : (
                      <span className="text-lg font-bold text-academic-600">{article.author.name.charAt(0)}</span>
                    )}
                  </div>
                  <div>
                    <div className="font-medium text-gray-900">{article.author.name}</div>
                    <div className="text-sm text-gray-500">{article.author.role}</div>
                  </div>
                </div>
                
                <div className="flex flex-wrap gap-4">
                  <div className="flex items-center gap-2 text-gray-500">
                    <Calendar size={16} className="text-academic-600" />
                    <span>{formatDate(article.date)}</span>
                  </div>
                  
                  {article.readTime && (
                    <div className="flex items-center gap-2 text-gray-500">
                      <Clock size={16} className="text-academic-600" />
                      <span>{article.readTime} de leitura</span>
                    </div>
                  )}
                  
                  {article.views && (
                    <div className="flex items-center gap-2 text-gray-500">
                      <Eye size={16} className="text-academic-600" />
                      <span>{article.views} visualizações</span>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </div>
          
          {/* Main content layout */}
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-12 max-w-7xl mx-auto">
            <motion.div 
              className="lg:col-span-8"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.8, delay: 0.3 }}
            >
              {/* Article Hero Image */}
              {article.image && (
                <div className="rounded-2xl overflow-hidden mb-12 relative shadow-xl">
                  <img 
                    src={article.image} 
                    alt={article.title}
                    className="w-full h-auto object-cover max-h-[500px]"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.onerror = null;
                      target.src = 'https://via.placeholder.com/1200x600?text=Article+Image';
                    }}
                  />
                  
                  {/* Gradient overlay */}
                  <div className="absolute inset-0 bg-gradient-to-t from-gray-900/40 via-transparent to-transparent"></div>
                  
                  {/* Image credit / caption */}
                  {article.imageCredit && (
                    <div className="absolute bottom-4 right-4 text-white text-xs bg-black/30 px-2 py-1 rounded-md backdrop-blur-sm">
                      {article.imageCredit}
                    </div>
                  )}
                </div>
              )}
              
              {/* Article Content */}
              <div className="article-content bg-white rounded-2xl p-6 md:p-10 shadow-lg border border-gray-100">
                <div className="prose prose-lg max-w-none prose-headings:text-gray-800 prose-headings:font-serif prose-p:text-gray-600 prose-a:text-academic-600 prose-a:no-underline hover:prose-a:text-academic-800" dangerouslySetInnerHTML={{ __html: article.content }} />

                {/* Article Footer */}
                <div className="mt-16 pt-8 border-t border-gray-200">
                  <div className="flex flex-col md:flex-row md:items-center justify-between gap-6">
                    {/* Tags */}
                    <div className="flex flex-wrap gap-2">
                      {article.tags?.map((tag: string, index: number) => (
                        <div 
                          key={index} 
                          className="px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-sm flex items-center gap-1.5 hover:bg-gray-200 transition-colors cursor-pointer"
                        >
                          <Tag size={12} className="text-academic-600" />
                          {tag}
                        </div>
                      ))}
                      {!article.tags && (
                        <div className="px-3 py-1 rounded-full bg-gray-100 text-gray-700 text-sm flex items-center gap-1.5">
                          <Tag size={12} className="text-academic-600" />
                          {article.category}
                        </div>
                      )}
                    </div>
                    
                    {/* Share links */}
                    <div className="flex items-center gap-4">
                      <span className="text-gray-500 text-sm">Compartilhar:</span>
                      <div className="flex gap-2">
                        <button className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600 hover:bg-academic-600 hover:text-white transition-colors">
                          <Facebook size={14} />
                        </button>
                        <button className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600 hover:bg-academic-600 hover:text-white transition-colors">
                          <Twitter size={14} />
                        </button>
                        <button className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600 hover:bg-academic-600 hover:text-white transition-colors">
                          <Linkedin size={14} />
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Author Bio */}
              <div className="mt-12 bg-gradient-to-br from-academic-50 to-white rounded-2xl p-8 border border-academic-100 shadow-md">
                <div className="flex flex-col sm:flex-row gap-6">
                  <div className="flex-shrink-0">
                    <div className="h-20 w-20 rounded-full bg-white border-2 border-academic-200 flex items-center justify-center overflow-hidden shadow-md">
                      {article.author.image ? (
                        <img 
                          src={article.author.image}
                          alt={article.author.name}
                          className="h-full w-full object-cover"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.onerror = null;
                            target.style.display = 'none';
                            target.parentElement!.innerHTML = `<div className="flex items-center justify-center h-full w-full bg-academic-100"><GraduationCap size={24} className="text-academic-600" /></div>`;
                          }}
                        />
                      ) : (
                        <div className="flex items-center justify-center h-full w-full bg-academic-100">
                          <GraduationCap size={24} className="text-academic-600" />
                        </div>
                      )}
                    </div>
                  </div>
                  <div>
                    <h3 className="text-xl font-serif font-bold text-gray-900 mb-2">{article.author.name}</h3>
                    <p className="text-academic-700 mb-4">{article.author.role}</p>
                    <p className="text-gray-600 mb-4">
                      {article.author.bio || "Especialista em sistemas financeiros cooperativos e educação financeira com mais de 15 anos de experiência acadêmica."}
                    </p>
                    <Link 
                      to="/autor/walter-eclache"
                      className="inline-flex items-center gap-2 text-academic-600 hover:text-academic-800"
                    >
                      <span>Ver todos os artigos</span>
                      <ChevronRight size={16} />
                    </Link>
                  </div>
                </div>
              </div>
            </motion.div>
            
            {/* Sidebar */}
            <motion.div 
              className="lg:col-span-4"
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8, delay: 0.5 }}
            >
              <div className="sticky top-24">
                {/* Related Articles */}
                <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-md mb-8">
                  <h3 className="text-xl font-serif font-bold text-gray-900 mb-6 flex items-center gap-2">
                    <span className="w-1 h-6 bg-academic-600 rounded-full"></span>
                    Artigos relacionados
                  </h3>
                  
                  {relatedArticles.length > 0 ? (
                    <div className="space-y-6">
                      {relatedArticles.map((related, index) => (
                        <div key={related.id} className={`flex gap-4 ${index !== relatedArticles.length - 1 ? 'pb-6 border-b border-gray-200' : ''}`}>
                          <div className="w-16 h-16 rounded-lg bg-gray-100 overflow-hidden flex-shrink-0 shadow-md">
                            {related.image ? (
                              <img 
                                src={related.image} 
                                alt={related.title}
                                className="w-full h-full object-cover"
                                onError={(e) => {
                                  const target = e.target as HTMLImageElement;
                                  target.onerror = null;
                                  target.src = 'https://via.placeholder.com/100?text=Article';
                                }}
                              />
                            ) : (
                              <div className="w-full h-full flex items-center justify-center bg-academic-50">
                                <Tag size={20} className="text-academic-600" />
                              </div>
                            )}
                          </div>
                          <div>
                            <Link 
                              to={`/blog/${related.slug}`} 
                              className="text-gray-900 hover:text-academic-700 transition-colors font-medium line-clamp-2"
                            >
                              {related.title}
                            </Link>
                            <div className="flex items-center gap-2 mt-2">
                              <div className="text-xs text-gray-500">{formatDate(related.date)}</div>
                              {related.readTime && (
                                <div className="text-xs text-gray-500 flex items-center gap-1">
                                  <Clock size={10} />
                                  {related.readTime}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <p className="text-gray-500">Nenhum artigo relacionado encontrado.</p>
                    </div>
                  )}
                </div>
                
                {/* Categories */}
                <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-md mb-8">
                  <h3 className="text-xl font-serif font-bold text-gray-900 mb-6 flex items-center gap-2">
                    <span className="w-1 h-6 bg-academic-600 rounded-full"></span>
                    Categorias
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {Array.from(new Set(walterArticles.map(a => a.category))).map((category, index) => (
                      <Link 
                        key={index}
                        to={`/blog?category=${category}`} 
                        className={`px-3 py-1.5 rounded-full text-sm ${
                          category === article.category 
                            ? 'bg-academic-600 text-white' 
                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                        } transition-colors`}
                      >
                        {category}
                      </Link>
                    ))}
                  </div>
                </div>
                
                {/* Newsletter */}
                <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-md">
                  <h3 className="text-xl font-serif font-bold text-gray-900 mb-3 flex items-center gap-2">
                    <span className="w-1 h-6 bg-academic-600 rounded-full"></span>
                    Newsletter
                  </h3>
                  <p className="text-gray-600 mb-6">
                    Receba novos artigos e dicas exclusivas diretamente no seu e-mail
                  </p>
                  <form className="space-y-4">
                    <input 
                      type="email" 
                      placeholder="Seu melhor e-mail"
                      className="w-full px-4 py-3 rounded-lg bg-gray-50 border border-gray-200 text-gray-800 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-academic-500/40 focus:border-transparent"
                    />
                    <button 
                      type="submit"
                      className="w-full px-4 py-3 rounded-lg bg-gradient-to-r from-academic-600 to-academic-500 text-white font-medium hover:shadow-lg transition-shadow"
                    >
                      Inscrever-se
                    </button>
                  </form>
                  <p className="text-xs text-gray-400 mt-3 text-center">
                    Você pode cancelar a inscrição a qualquer momento
                  </p>
                </div>
              </div>
            </motion.div>
          </div>
          
          {/* Navigation between articles */}
          <div className="max-w-4xl mx-auto mt-16 pt-8 border-t border-gray-200">
            <div className="flex flex-col sm:flex-row gap-4 justify-between">
              <Link 
                to="/blog"
                className="px-6 py-3 rounded-xl bg-white border border-gray-200 flex items-center gap-2 text-gray-800 hover:bg-gray-50 transition-colors shadow-sm"
              >
                <ArrowLeft size={18} className="text-academic-600" />
                <span>Voltar para o Blog</span>
              </Link>
              
              <button
                onClick={() => navigate(-1)}
                className="px-6 py-3 rounded-xl bg-white border border-gray-200 flex items-center gap-2 text-gray-800 hover:bg-gray-50 transition-colors shadow-sm"
              >
                <span>Próximo artigo</span>
                <ArrowRight size={18} className="text-academic-600" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ArticlePage;
